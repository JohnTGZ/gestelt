#ifndef _PLANNING_VISUALIZATION_H_
#define _PLANNING_VISUALIZATION_H_

#include <eigen3/Eigen/Eigen>
#include <algorithm>
#include <iostream>
#include <ros/ros.h>
#include <vector>
#include <visualization_msgs/Marker.h>
#include <visualization_msgs/MarkerArray.h>
#include <stdlib.h>

using std::vector;
namespace ego_planner
{
  class PlanningVisualization
  {
  private:
    std::string origin_frame_;

    ros::NodeHandle node;

    ros::Publisher goal_point_pub;
    ros::Publisher global_list_pub;
    ros::Publisher initial_mjo_pub_; // Publish unconstrained coordinates
    ros::Publisher initial_mjo_q_pub_; // Publish projected coordinates q
    ros::Publisher initial_mjo_xi_pub_; // Publish unconstrained coords xi

    ros::Publisher optimal_list_pub;
    ros::Publisher failed_list_pub;
    ros::Publisher a_star_list_pub;

    ros::Publisher planner_sv_pairs_pub_;

    ros::Publisher intmd_pt0_pub;
    ros::Publisher intmd_pt1_pub;
    ros::Publisher intmd_grad0_pub;
    ros::Publisher intmd_grad1_pub;
    ros::Publisher intmd_grad_smoo_pub;
    ros::Publisher intmd_grad_static_obs_pub;
    ros::Publisher intmd_grad_feas_pub;
    ros::Publisher intmd_grad_swarm_pub;

  public:
    PlanningVisualization(/* args */) {}
    ~PlanningVisualization() {}
    PlanningVisualization(ros::NodeHandle &nh);

    typedef std::shared_ptr<PlanningVisualization> Ptr;

    // Helper functions for generating display marker data structures 

    void displayMarkerList(ros::Publisher &pub, const vector<Eigen::Vector3d> &list, double scale,
                           Eigen::Vector4d color, int id,  bool show_sphere = true);
    void generatePathDisplayArray(visualization_msgs::MarkerArray &array,
                                  const vector<Eigen::Vector3d> &list, double scale, Eigen::Vector4d color, int id);
    
    /**
     * @brief Generate an array of arrows given a list of start-end point pairs
     * 
     * @param array 
     * @param list 
     * @param scale 
     * @param color 
     * @param id 
     */
    void generateArrowDisplayArray(visualization_msgs::MarkerArray &array, 
      const vector<Eigen::Vector3d> &list, 
      double scale, const Eigen::Vector4d& color, const int& id);

    // Publisher functions 

    void displayGoalPoint(Eigen::Vector3d goal_point, Eigen::Vector4d color, const double scale, int id);
    void displayGlobalPathList(vector<Eigen::Vector3d> global_pts, const double scale, int id);
    void displayInitialMJO(vector<Eigen::Vector3d> init_pts, const double scale, int id);
    void displayInitialMJO_q(Eigen::MatrixXd pts, int id);
    void displayInitialMJO_xi(Eigen::MatrixXd pts, int id);

    void displayMultiInitPathList(vector<vector<Eigen::Vector3d>> init_trajs, const double scale);
    void displayOptimalList(Eigen::MatrixXd optimal_pts, int id);
    void displayFailedList(Eigen::MatrixXd failed_pts, int id);
    void displayAStarList(std::vector<std::vector<Eigen::Vector3d>> a_star_paths, int id);
    void displayArrowList(
      ros::Publisher &pub, const vector<Eigen::Vector3d> &list, double scale, const Eigen::Vector4d& color, const int& id);
    
    void displayIntermediatePt(std::string type, Eigen::MatrixXd &pts, int id, Eigen::Vector4d color);
    void displayIntermediateGrad(std::string type, Eigen::MatrixXd &pts, Eigen::MatrixXd &grad, int id, Eigen::Vector4d color);

    /**
     * @brief Display static obstacle gradients
     * 
     * @param pts Starting Point (x, y, z) 
     * @param grad Direction vector (x, y, z) 
     * @param id 
     * @param color 
     */
    void pubStaticObsGrad(Eigen::MatrixXd &pts, Eigen::MatrixXd &grad, int id, Eigen::Vector4d color);

    /**
     * @brief Display {s,v} pairs generated by the ESDF-Free local planner
     * 
     * @param pts Starting Point (x, y, z) 
     * @param grad Direction vector (x, y, z) 
     * @param id 
     * @param color 
     */
    void pubSVPairs(const std::vector<Eigen::Vector3d> &pts, 
      const std::vector<Eigen::Vector3d> &grad, 
      const int& id, const Eigen::Vector4d& color);

  };
} // namespace ego_planner
#endif // _PLANNING_VISUALIZATION_H_