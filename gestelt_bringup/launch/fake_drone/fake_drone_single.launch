<launch>
    <!-- Drone id -->
    <arg name="drone_id"/>
    <arg name="drone_id_ns" value="drone$(arg drone_id)"/>
    <arg name="num_drones"/>
    <arg name="init_x"/>
    <arg name="init_y"/>
    <arg name="init_z"/>
    <!-- size of map, change the size inflate x, y, z according to your application -->
    <arg name="map_size_x"/>
    <arg name="map_size_y"/>
    <arg name="map_size_z"/>
    <arg name="map_filepath"/>
    <!-- Input/output topics -->
    <arg name="command_topic"/>
    <arg name="odometry_topic"/>
    <arg name="pose_topic"/>
    <arg name="depth_img_topic"/>
    <arg name="point_cloud_topic"/>

    <!-- Add static transform from drone to it's origin -->
    <node pkg="tf" type="static_transform_publisher" 
      name="map_to_$(arg drone_id_ns)_origin_tf" 
      args="$(arg init_x) $(arg init_y) $(arg init_z) 0 0 0 1 map $(arg drone_id_ns)_origin 100" />

    <!-- Add static transform from base_link to camera_link -->
    <node pkg="tf" type="static_transform_publisher" 
      name="$(arg drone_id_ns)_base_link_to_cam_link_tf" 
      args="0.08 0 0.02 0 0 0 1 $(arg drone_id_ns)_base_link $(arg drone_id_ns)_cam_link 100" />

    <!-- Simulated quadcopter -->
    <node pkg="fake_drone" type="fake_drone" name="fake_drone_$(arg drone_id_ns)" output="screen">
        <remap from="mavros/setpoint_raw/local" to="/$(arg drone_id_ns)/$(arg command_topic)"/>
        <remap from="mavros/local_position/odom" to="/$(arg drone_id_ns)/$(arg odometry_topic)"/>
        <remap from="mavros/local_position/pose" to="/$(arg drone_id_ns)/$(arg pose_topic)"/>

        <rosparam command="load" file="$(find gestelt_bringup)/config/fake_drone_params.yaml" />
        <param name="uav/id" value="$(arg drone_id_ns)"/>
        <param name="uav/init_x" value="$(arg init_x)"/>
        <param name="uav/init_y" value="$(arg init_y)"/>
        <param name="uav/init_z" value="$(arg init_z)"/>

        <param name="uav/origin_frame" value="$(arg drone_id_ns)_origin"/>
        <param name="uav/sensor_frame" value="$(arg drone_id_ns)_cam_link"/>
    </node>

    <!-- Fake sensor data node -->
    <node pkg="fake_map" type="fake_map" name="fake_map_$(arg drone_id_ns)" output="screen">
        <!-- Subscriber to uav pose -->
        <!-- <remap from="uav/pose" to="/$(arg drone_id_ns)/$(arg pose_topic)"/> -->
        <!-- Publisher of uav sensor cloud -->
        <remap from="uav/sensor_cloud" to="/$(arg drone_id_ns)/$(arg point_cloud_topic)"/>

        <rosparam command="load" file="$(find gestelt_bringup)/config/fake_laser_params.yaml" />
        <param name="uav/id" value="$(arg drone_id_ns)"/>
        <param name="uav/global_frame" value="world"/>
        <param name="uav/origin_frame" value="$(arg drone_id_ns)_origin"/>
        <param name="uav/sensor_frame" value="$(arg drone_id_ns)_cam_link"/>
        <param name="map/filepath" value="$(arg map_filepath)"/>
    </node>

    <include file="$(find gestelt_bringup)/launch/ego_planner.launch">
        <arg name="px4_device" value="false" />
        <arg name="drone_origin_frame" value="world" />

        <arg name="drone_id"   value="$(arg drone_id)"/>
        <arg name="init_x"     value="$(arg init_x)"/>
        <arg name="init_y"     value="$(arg init_y)"/>
        <arg name="init_z"     value="$(arg init_z)"/>
        <arg name="num_drones" value="$(arg num_drones)"/>
        <arg name="map_size_x" value="$(arg map_size_x)"/>
        <arg name="map_size_y" value="$(arg map_size_y)"/>
        <arg name="map_size_z" value="$(arg map_size_z)"/>
        <arg name="pose_topic" value="$(arg pose_topic)"/>
        <arg name="odometry_topic" value="$(arg odometry_topic)"/>
        <arg name="depth_img_topic" value="$(arg depth_img_topic)"/>
        <arg name="point_cloud_topic" value="$(arg point_cloud_topic)"/>
        <arg name="command_topic" value="$(arg command_topic)" />
    </include>

</launch>